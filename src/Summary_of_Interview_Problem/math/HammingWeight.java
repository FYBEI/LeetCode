package Summary_of_Interview_Problem.math;

/**
 * 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
 *
 * 示例 1：
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 *
 * 示例 2：
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 *
 * 示例 3：
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 */
public class HammingWeight {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {

        int num = 0;
        for (int i = 0; i < 32; i++){
            // 1的二进制为0001，进行|运算，最后一位为1，其余位不变，如果两个数字一样，则原数字最后一位为1，否则原数字最后一位为0
            int tmp = n|1;

            if (tmp == n){
                num++;
            }

            // n右移一位
            n >>= 1;
        }

        return num;
    }
}
